{namespace view}

{template head}
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{$title}</title>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:300,400' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="http//cdn.jsdelivr.net/typeplate/1.1.2/typeplate.min.css">
    <link rel="stylesheet" href="web/style.css">
  </head>
{/template}

{template code}
  <pre>
    <code class="lisp">
(deftable user ()<br>
  (name :type string :uniquep t)<br>
  (age  :type integer :nullp nil))<br>
    </code>
  </pre>
{/template}

{template snippet}
  <div id="editor">
    <div id="bar">
      <ul>
        <li><div id="close" class="circle"></div></li>
        <li><div id="minimize" class="circle"></div></li>
        <li><div id="maximize" class="circle"></div></li>
      </ul>
    </div>
    <div id="text">
      {call code /}
    </div>
  </div>
{/template}

{template features}
  <section id="features">
    <div>
      <span>Not Opinionated</span>
      <p>Crane doesn't drink the ORM Kool Aid: You won't spent a single minute
      struggling with an interface that claims to be "simple" yet forces you
      into a limited vision of how database interfaces should be.</p>
      <p>To make simple queries, Crane has a simple interface. For more complex
      stuff, use the <a href="https://github.com/fukamachi/sxql">SQL query DSL</a>. If
      you like plain old fashioned SQL, you can use that too &mdash; Crane
      doesn't judge.</p>
    </div>
  </section>
{/template}

{template footer}
  <footer>
    Â© 2014 <a href="http://github.com/eudoxia0">Fernando Borretti</a>
  </footer>
{/template}

{template index}
  <!DOCTYPE html>
  <html lang="en">
    {call head}
      {param title: 'Crane: An ORM for Common Lisp' /}
    {/call}
    <body>
      <header>
        <span id="name">Crane</span>
        <span id="subtitle">An ORM for Common Lisp</span>
        {call snippet /}
      </header>
      {call features /}
      {call footer /}
    </body>
  </html>
{/template}
